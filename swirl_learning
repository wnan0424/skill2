#*apply 
dim(flags)
[1] 194  30    # 194 rows, and 30 columns

sapply(flag_shapes, range)  # the min and max value of each column

sapply(flags, unique) # returns a list containing one vector of unique values for each column of the flags dataset

vapply(flags, unique, numeric(1))  #  a safer than sapply : error if each element of the result to be NOT a numeric vector of length 1

table(flags$landmass)
 1  2  3  4  5  6 
31 17 35 52 39 20     # the number of every level 

tapply(flags$animate, flags$landmass, mean)    
  1         2         3         4         5         6 
0.4193548 0.1764706 0.1142857 0.1346154 0.1538462 0.3000000     #to apply the mean function to the 'animate' variable separately
                                                                for each of the six landmass groups. split your data
                                                                into groups based on the value of some variable, then apply a
                                                                function to each group.
                                                                
tapply(mtcars$mpg, mtcars$cyl, mean) == sapply(split(mtcars$mpg, mtcars$cyl), mean) == with(mtcars, tapply(mpg, cyl, mean))                                                                 








11. looking at data 
object.size(plants)    # how much space the dataset is occupying in memory 
ls()  #to list the variables in your workspace

names(plants)      # return a character vector of column (i.e. variable) names

head(plants, 10) 
tail(plants, 15)

 table(plants$Active_Growth_Period)   #how many times each value actually occurs in the data
 
 str(plants) # identify the structure 
 
 
 
 
 
 
 12. simulation 
 sample(1:6, 4, replace = TRUE) #select 4 number from 1:6 
 flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

> rbinom (1, size = 100, prob = 0.7)
[1] 61              # a single random variable that represents the number of heads in 100 flips of our unfair coin
> flips2 <- rbinom(100, size = 1, prob = 0.7)
  [1] 1 1 1 1 0 0 1 0 1 1 1 0 0 1 1 1 0 0 1 0 1 1 1 0 1 1 1 1 0 0 0 1 0
 [34] 1 1 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 0 1 1
 [67] 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 0 1 0 0 1 0 0 1 0 1 0 1 0 1 0 0
[100] 1

> rnorm(10, mean = 100, sd = 25)
 [1] 123.55667 107.49630  92.58885 111.22653 107.79632  74.79879
 [7]  99.03713  99.43503 118.14440  91.25727
 
 > rpois(5, 10)
[1] 10 12  8  8  5   # random 5 number with mean 10 
replicate(100, rpois(5,10)) # repeat 100 times 

 < cm <- colMeans(my_pois) the mean of each column 
 < hist(cm)  # plotting a histogram
 
 
 
 
 
 15. base graphics 
| Before plotting, it is always a good idea to get a sense of the data.
| Key R commands for doing so include, dim(), names(), head(), tail()
| and summary().
 
 plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
 plot(cars, main = "My Plot", sub = "My Plot Subtitle", xlim = c(10, 15), col = 2, pch = 2) # color is red, shape is triangle 
 
 > boxplot(mpg ~ cyl, data = mtcars)
 
 > ggplot(mtcars, aes(x=mpg, y=wt, colour=cyl)) +geom_point()
