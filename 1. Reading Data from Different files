#read excel 
library(xlsx)
data <- read.xlsx("data.xlsx", header = T, SheetIndex = 1, colIndex =1:3, rowIndex = 1:5 )
XLconnect 
write.xlsx



#read xml
library(XML)
URL<-"http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(URL, useInternal = TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
## [1] "response"
zips <- xpathSApply(rootNode, "//zipcode", xmlValue)
length(zips[which(zips=="21231")])



#reading from MySQL 
ucscDb <- dbConnect(MySQL(),user = "genome", host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);

hg19 <- dbConnect(MySQL(),user = "genome",db = "hg19", host = "genome-mysql.cse.ucsc.edu")
alltable <- dblistTables(hg19)
length(alltable)
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affydata <- dbReadTable(hg19, "affyU133Plus2")

query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)

affyMisSmall <- fetch(query, n=10); dbClearResult(query);
dbDisconnect(hg19)


# Reading from HDF5 
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")

library(rhdf5)
created = h5createFile("example.h5")
created

created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")

A <- matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5","foo/A")
B <- array(seq(0.1, 2.0, by=0.1), dim = c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")

df <- data.frame(1L:5L, seq(0,1, length.out = 5), c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")

readA <- h5read("example.h5","foo/A")
readB <- h5read("example.h5","foo/foobaa/B")
readdf <- h5read("example.h5","df")

h5write(c(12,13,14), "example.h5","foo/A", index = list(1:3,1))
h5read("example.h5","foo/A")



# READING FROM WEBSITES 
library(XML)
url <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes =T )
xpathSApply(html, "//title",xmlValue)
xpathSApply(html, "//td[@id='col-citedby']",xmlValue)

library(httr)
html2 <- GET(url)
content2 <- content(html2, as= "text")
parsedHtml <- htmlParse(content2, asText =T )
xpathSApply(parsedHtml, "//title", xmlValue)

# Question 4
# How many characters are in the 10th, 20th, 30th and 100th lines of HTML from this page:
# http://biostat.jhsph.edu/~jleek/contact.html
# (Hint: the nchar() function in R may be helpful)
tryCatch({
  con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
  html <- readLines(con)
}, finally = {
  close(con)
})
answer4 <- c()
sapply(c(10, 20, 30, 40), function(line) {
  answer4 <<- c(answer4, nchar(html[line]))
})

#need passwords
pg2 <- GET("http://.../passwd", authenticate("user","passwd"))
pg2 

#using handles
google <- handle("http://google.com")
pg1 <- GET(handle = google, path ="/")
pg2 <- GET(handle = google, path ="serch")




#reading from API 
load_packages("httr", "sqldf")

# Question 1
#
# Register an application with the Github API here: 
# https://github.com/settings/applications. 
#
# Access the API to get information on your instructors repositories 
# (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). 
# Use this data to find the time that the datasharing repo was created. 
#
# What time was it created? 
#
# Hints:
# This tutorial may be useful
# https://github.com/hadley/httr/blob/master/demo/oauth2-github.r
#
# You may also need to run the code in the base R package and not R studio.

# Find OAuth settings for github:
# http://developer.github.com/v3/oauth/
github <- oauth_endpoints("github")

# Replace your key and secret below.
myapp <- oauth_app("github",
                   key = "67340622eff03d86a8c2",
                   secret = "1efcb21fc38d1d64c82d9c7f87b89dd90978b0e5")



# Get OAuth credentials
github_token <- oauth2.0_token(github, myapp)

# Use the API
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
repo_list <- content(req)

answer1 <- c() 
for (i in 1:length(repo_list)) {
        repo <- repo_list[[i]]
        if (repo$name == "datasharing") {
                answer1 = repo
                break
        }
}



# reading From For 
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(fileurl, destfile = "quiz3.for")
aa <- read.fwf("quiz3.for", widths = c(-1,9,c(-5,4,4),c(-5,4,4),c(-5,4,4),c(-5,4,4)),skip = 4)
# equal to bb <- read.fwf("quiz3.for", widths = c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4),skip = 4)
# equal to 
col_seq <- c(-5, 4, 4)
cc <- read.fwf("quiz3.for", widths = c(-1,9, col_seq, col_seq, col_seq, col_seq),skip = 4)
dd <- sum(bb[,4])



#READING FROM jpg 
if (!file.exists("./data")){dir.create("./data")}
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileurl, destfile = "aa.jpg", mode = "wb")
jp <- readJPEG("aa.jpg", native = T)
quantile(jp, probs = c(0.3, 0.8))


read.arff(Weka)
read.dta(Stata)
read.mtp(Minitab)
read.octave(Octave)
read.spss(SPSS)
read.xport(SAS)
